name: CI/CD

on:
  push:
    branches: ["main", "develop"]

permissions:
  contents: read

jobs:
  ci-build:
    name: 🔧 CI - Build & Docker Push
    runs-on: ubuntu-latest

    steps:
      - name: 레포지토리 체크아웃
        uses: actions/checkout@v4

      - name: JDK 17 세팅
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Gradle 세팅
        uses: gradle/actions/setup-gradle@v4

      - name: application.yml 생성
        run: |
          sudo mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION_PROPERTIES }}" | base64 --decode > src/main/resources/application.yml

      - name: gradlew 빌드
        run: |
          chmod +x gradlew
          ./gradlew build -x test

      - name: 도커허브 로그인
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_ID }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 도커 이미지 빌드
        run: |
          BRANCH_NAME=${GITHUB_REF##*/}
          if [ "$BRANCH_NAME" = "main" ]; then
            docker build -t ${{ secrets.DOCKERHUB_ID }}/animal-app:latest .
          else
            docker build -t ${{ secrets.DOCKERHUB_ID }}/animal-app-develop:latest .
          fi

      - name: 도커 이미지 푸시
        run: |
          BRANCH_NAME=${GITHUB_REF##*/}
          if [ "$BRANCH_NAME" = "main" ]; then
            docker push ${{ secrets.DOCKERHUB_ID }}/animal-app:latest
          else
            docker push ${{ secrets.DOCKERHUB_ID }}/animal-app-develop:latest
          fi

  # ================================
  # 🚀 CD: GCP VM에 배포
  # ================================
  cd-deploy:
    name: 🚀 CD - Deploy to GCP VM
    runs-on: ubuntu-latest
    needs: ci-build

    steps:
      - name: 레포지토리 체크아웃
        uses: actions/checkout@v4

      - name: GCP SSH 키 파일 생성
        run: |
          echo "${{ secrets.GCP_PRIVATEKEY }}" > gcp_key.pem
          chmod 600 gcp_key.pem

      - name: .env 파일 생성
        run: |
          echo "DB_HOST"=${{ secrets.DB_HOST }} >> .env
          echo "DB_PORT"=${{ secrets.DB_PORT }} >> .env
          echo "DB_NAME"=${{ secrets.DB_NAME }} >> .env
          echo "DB_USERNAME"=${{ secrets.DB_USERNAME }} >> .env
          echo "DB_PASSWORD"=${{ secrets.DB_PASSWORD }} >> .env
          

      - name: .env 파일 GCP에 복사
        run: |
          # GCP에 .env 파일 복사
          scp -i gcp_key.pem -o StrictHostKeyChecking=no .env ${{ secrets.GCP_USERNAME }}@${{ secrets.GCP_HOST }}:/home/${{ secrets.GCP_USERNAME }}/animal/.env
          echo "✅ .env 파일 복사 완료"
          
          # GCP에서 .env 파일 내용 확인
          ssh -i gcp_key.pem -o StrictHostKeyChecking=no ${{ secrets.GCP_USERNAME }}@${{ secrets.GCP_HOST }} "cat /home/${{ secrets.GCP_USERNAME }}/animal/.env"
          echo "🔍 GCP에서 .env 파일 내용 확인 완료"
      
          # .env, 키파일 정리
          rm .env

      - name: docker-compose.yml GCP에 복사 + 상태 확인
        run: |
          BRANCH_NAME=${GITHUB_REF##*/}
          if [ "$BRANCH_NAME" = "main" ]; then
            echo "👉 main 브랜치 - 8080으로 설정"
            scp -i gcp_key.pem -o StrictHostKeyChecking=no docker-compose.main.yml ${{ secrets.GCP_USERNAME }}@${{ secrets.GCP_HOST }}:/home/${{ secrets.GCP_USERNAME }}/animal/docker-compose.yml
          elif [ "$BRANCH_NAME" = "develop" ]; then
            echo "👉 develop 브랜치 - 8081로 설정"
            scp -i gcp_key.pem -o StrictHostKeyChecking=no docker-compose.develop.yml ${{ secrets.GCP_USERNAME }}@${{ secrets.GCP_HOST }}:/home/${{ secrets.GCP_USERNAME }}/animal/docker-compose.yml
          fi
          
          echo "🔍 복사된 docker-compose.yml 확인"
          ssh -i gcp_key.pem -o StrictHostKeyChecking=no ${{ secrets.GCP_USERNAME }}@${{ secrets.GCP_HOST }} "cat /home/${{ secrets.GCP_USERNAME }}/animal/docker-compose.yml"
          

      - name: GCP SSH 키 파일 삭제
        run: |
          echo "🔑 GCP SSH 키 파일 삭제"
          rm gcp_key.pem

      - name: GCP 서버에 SSH 접속하여 배포
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.GCP_HOST }}
          username: ${{ secrets.GCP_USERNAME }}
          key: ${{ secrets.GCP_PRIVATEKEY }}
          port: 22
          script: |
            sudo docker login -u ${{ secrets.DOCKERHUB_ID }} --password-stdin ${{ secrets.DOCKERHUB_TOKEN }}
            BRANCH_NAME=${GITHUB_REF##*/}
            if [ "$BRANCH_NAME" = "main" ]; then
            sudo docker pull ${{ secrets.DOCKERHUB_ID }}/animal-app:latest
            else
            sudo docker pull ${{ secrets.DOCKERHUB_ID }}/animal-app-develop:latest
            fi
            cd /home/${{secrets.GCP_USERNAME}}/animal
            pwd
            sudo docker compose down || true
            sudo docker compose up -d --remove-orphans
            sudo docker image prune -f
      
            echo "✅ 배포 완료! 서버 상태 확인 중..."
            sudo docker compose logs