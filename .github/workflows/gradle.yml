name: CI/CD

on:
  push:
    branches: ["main"]

permissions:
  contents: read

jobs:
  ci-build:
    name: 🔧 CI - Build & Docker Push
    runs-on: ubuntu-latest

    steps:
      - name: 레포지토리 체크아웃
        uses: actions/checkout@v4

      - name: JDK 17 세팅
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Gradle 세팅
        uses: gradle/actions/setup-gradle@v4

      - name: application.yml 생성
        run: |
          sudo mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION_PROPERTIES }}" | base64 --decode > src/main/resources/application.yml

      - name: gradlew 빌드
        run: |
          chmod +x gradlew
          ./gradlew build -x test

      - name: 도커허브 로그인
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_ID }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 도커 이미지 빌드
        run: |
          docker build -t ${{ secrets.DOCKERHUB_ID }}/animal-app:latest .

      - name: 도커 이미지 푸시
        run: |
          docker push ${{ secrets.DOCKERHUB_ID }}/animal-app:latest

  # ================================
  # 🚀 CD: GCP VM에 배포
  # ================================
  cd-deploy:
    name: 🚀 CD - Deploy to GCP VM
    runs-on: ubuntu-latest
    needs: ci-build

    steps:
      - name: 레포지토리 체크아웃
        uses: actions/checkout@v4

      # - name: .env 파일 생성
      #   run: |
      #     echo "NAVER_CLIENT_ID=${{ secrets.NAVER_CLIENT_ID }}" >> .env
      #     echo "NAVER_CLIENT_SECRET=${{ secrets.NAVER_CLIENT_SECRET }}" >> .env
      #     echo "NAVER_REDIRECT_URI=${{ secrets.NAVER_REDIRECT_URI }}" >> .env
      #     echo "KAKAO_API_KEY=${{ secrets.KAKAO_API_KEY }}" >> .env
      #     echo "KAKAO_REDIRECT_URI=${{ secrets.KAKAO_REDIRECT_URI }}" >> .env

#      - name: .env 파일 GCP에 복사
#        uses: appleboy/scp-action@v0.1.7
#        with:
#          host: ${{ secrets.GCP_HOST }}
#          username: ${{ secrets.GCP_USERNAME }}
#          key: ${{ secrets.GCP_PRIVATEKEY }}
#          port: 22
#          source: ".env"
#          target: "/home/animal"
#          overwrite: true
#          debug: true

      - name: docker-compose.yml GCP에 복사
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.GCP_HOST }}
          username: ${{ secrets.GCP_USERNAME }}
          key: ${{ secrets.GCP_PRIVATEKEY }}
          port: 22
          source: "docker-compose.yml"
          target: "/home/${{secrets.GCP_USERNAME}}/animal"
          overwrite: true
          strip_components: 1
          debug: true

#      - name: docker-compose.yml GCP에 복사 + 상태 확인
#        run: |
#          echo "${{ secrets.GCP_PRIVATEKEY }}" > gcp_key.pem
#          chmod 600 gcp_key.pem
#
#          echo "📁 디렉토리 생성..."
#          ssh -i gcp_key.pem -o StrictHostKeyChecking=no ${{ secrets.GCP_USERNAME }}@${{ secrets.GCP_HOST }} "mkdir -p /home/${{ secrets.GCP_USERNAME }}/animal"
#
#          echo "📦 docker-compose.yml 전송..."
#          scp -i gcp_key.pem -o StrictHostKeyChecking=no docker-compose.yml ${{ secrets.GCP_USERNAME }}@${{ secrets.GCP_HOST }}:/home/${{ secrets.GCP_USERNAME }}/animal/
#
#          echo "🔍 복사된 파일 확인:"
#          ssh -i gcp_key.pem -o StrictHostKeyChecking=no ${{ secrets.GCP_USERNAME }}@${{ secrets.GCP_HOST }} "ls -al /home/${{ secrets.GCP_USERNAME }}/animal"
#
#          echo "🧹 SSH 키 삭제"
#          rm gcp_key.pem

      - name: GCP 서버에 SSH 접속하여 배포
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.GCP_HOST }}
          username: ${{ secrets.GCP_USERNAME }}
          key: ${{ secrets.GCP_PRIVATEKEY }}
          port: 22
          script: |
            sudo docker login -u ${{ secrets.DOCKERHUB_ID }} -p ${{ secrets.DOCKERHUB_TOKEN }}
            sudo docker pull ${{ secrets.DOCKERHUB_ID }}/animal-app:latest
            cd /home/${{secrets.GCP_USERNAME}}/animal
            pwd
            sudo docker compose down || true
            sudo docker compose up -d --remove-orphans
            sudo docker image prune -f